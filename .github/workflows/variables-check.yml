name: Verify secrets

on:
  workflow_dispatch:
    inputs:
      message:
        description: "Message for test"
        required: false

jobs:
  verify:
    runs-on: ubuntu-latest

    steps:
    - name: Check token exists
      run: |
        if [ "${{ secrets.FERDIUM_PUBLISH_TOKENÂ }}" != '' ] ; then
          echo "Token 'FERDIUM_PUBLISH_TOKEN' is available."
          echo "verify_authorization=true" >> "$GITHUB_ENV"
        else
          echo "Token is not available for this workflow."
          echo "verify_authorization=false" >> "$GITHUB_ENV"
        fi
    - name: Verify token authorisation
      if: ${{ env.verify_authorization }}
      run: |
        curl -L -sS -f -I -H "Authorization: token ${AUTH_TOKEN}" https://api.github.com/repos/Alphrag/ferdium-app/releases
        
        curl --verbose -L -X POST -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${AUTH_TOKEN}"\
        -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Alphrag/ferdium-app/releases \
        -d '{"tag_name":"v0.0.0-test","target_commitish":"Alphrag-local-release","name":"v0.0.0-test","body":"Workflow test creating release","draft":true,"prerelease":true,"generate_release_notes":false}'
      env:
        AUTH_TOKEN: ${{ secrets.FERDIUM_PUBLISH_TOKEN }}
    - name: Check certifs for Mac
      run: |
        if [[ "${{ secrets.CSC_LINK }}" != '' && "${{ secrets.CSC_KEY_PASSWORD }}" != '' ]] ; then
          echo "- Certificate variables for Mac correctly set!"
        else
          echo "- Error with values contained in CSC_* certificates."
        fi
    - name: Check certifs for Windows
      run: |
        if [[ "${{ secrets.WIN_CSC_LINK }}" != '' && "${{ secrets.WIN_CSC_KEY_PASSWORD }}" != '' ]] ; then
          echo "- Certificate variables for Windows correctly set!"
        else
          echo "- Error with values contained in WIN_CSC_* certificates."
        fi
  install_winget:
    runs-on: windows-latest
    if: ${{ contains(github.event.inputs.message, 'install winget') }}
    steps:
      - name: "Install winget"
        run: |
          Import-Module Appx
          iwr 'https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx' -OutFile $env:TEMP\vclibs.appx
          iwr 'https://github.com/microsoft/winget-cli/releases/download/v1.3.2091/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle' -OutFile $env:TEMP\winget.msixbundle
          iwr 'https://github.com/microsoft/winget-cli/releases/download/v1.3.2091/7b91bd4a0be242d6aa8e8da282b26297_License1.xml' -Outfile $env:TEMP\winget.license

          # Follow idea of https://www.andreasnick.com/112-install-winget-and-appinstaller-on-windows-server-2022.html
          Add-AppxPackage $env:TEMP\vclibs.appx

          Add-AppxProvisionedPackage -Online -PackagePath $env:TEMP\winget.msixbundle -LicensePath $env:TEMP\winget.license -DependencyPackagePath $env:TEMP\vclibs.appx
      - name: Verify setup
        if: always()
        run: |
          Import-Module Appx
          Get-AppxPackage microsoft.desktopappinstaller
          echo $env:PATH
      - name: "Verify winget"
        if: always()
        run: |
          winget --info
      - name: Check if errored
        if: failure()
        run: |
          & "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget"
